////////////////////////////////////////////////////////////////////////////////////
//  MyoSAT  [Myofiber Segmentation and Analysis Tool]
//  
//  FILENAME:  MyoSAT_v3_5_Beta.ijm
//  VERSION:   v.3.5 beta  release 6/25/2020 
//
//  AUTHORS:  Courtney Stevens, Michael Sledziona, Josh Berenson   [Cornell University]
//
//  DESCRIPTION:   This ImageJ macro code semi-automated segmentation of antibody fluorescent labeled muscle histology cross-sections
//    The image processing pipeline implemented in this code has been developed to segment large area muscle cross-sections containing up to several thousand fibers
//    The code applies Steger's line detection algorithm to aid in identifying the fiber boundaries. Classic watershed segmentation is used for final segmenation.
//
//  CITATION:
//  Approach for Semi-Automated Measurement of Fiber Diameter in Murine and Canine Skeletal Muscle
//     Courtney R. Stevens, Michael Sledziona, Josh Berenson, Timothy P. Moore, Lynn Dong, Jonathan Cheetham
//
//  REFERENCES:
//  Steger C. An Unbiased Detector of Curvilinear Structures. Munchen; 
//           IEEE Transactions on Pattern Analysis and Machine Intelligence 1998
// 
//  Installation / Dependancies:
//      The following 3rd party ImageJ plugins are required:
//      [ij-Plugins]  (ijp-toolkit)  ij-plugins/ijp-toolkit_2.12-2.2.0.jar 
//      [Biomedgroup]  ij_ridge_detect-1.4.1-SNAPSHOT.jar
//      [IJPB-plugins] (MorphoLibJ)  MorphoLibJ_-1.4.2.jar  
//
//      These plugin packages can be installed by enabling ImageJ update sites
//         [ImageJ]   Help->Update->Manage update site
//             Biomedgroup  https://sites.imagej.net/Biomedgroup/
//             IJPB-plugins   https://sites.imagej.net/IJPB-plugins/
//             IJ-Plugins  https://sites.imagej.net/IJ-Plugins/
//
//  MACRO USAGE:
//    The macro processes *.tif format grayscale images [8 bit and 16 bit grayscale depth]. The images should not be tiled tifs [See Note1]
//    2 images are input:   
//      1) Image of muscle cross-section.   
//      2) A mask image to select the regions to analyze   [0=Not-Selected,255= Selected]]//			     
//   The mask image is used to identify the boundaries of the region to analyze as well as it can be used to exclude regions of connective tissue.
//   Mask images are typcically used for analysis of large cross-sections
//   The mask can be generated using GIMP or other editing software.
//
//
//  NOTES:
// 		Note1:  Tiled Tiffs (often generated by slide scanners) may be converted flat tiffs using the Bio-formats Importer plugin
///             See:  https://imagej.net/Bio-Formats				
//       
//
// COPYRIGHT DETAILS OF THIS IMAGEJ MACRO:
//
// Copyright (c) 2020 Cornell University (School of Veterinary Medicine)
//
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
////////////////////////////////////////////////////////////////////////////////////
//
// Version history:
//     v1.0 released 3/8/2019 by Mike Sledziona
// 	   v1.1 released 8/6/2019 by Josh Berenson
//     v2.0 Beta released 5/6/2020 Mike Sledziona/Josh Berenson
//     v3.0 Beta released 6/4/2020 Mike Sledziona/Josh Berenson
//	   v3.4 Beta released 6/9/2020 Updated code to run on Mac
//	   v3.5 Beta released 6/9/2020 Updated code to process H&E images
////////////////////////////////////////////////////////////////////////////////////
//
//
// To Do list:
// -----------
// Do we still need "debugmode"?
// Add CloseProgressWindow function
// Add error checking / range checks on input parameters

SCRIPT_NAME="MyoSAT_v3_5_Beta.ijm";
SCRIPT_VERSION_STRING="v3.5 Beta";

//ImageJ version Check
requires( "1.52p" );

//Debugging Flags
DebugMode=false;  //For image processing debugging. Add step-by step wait.




//***** DEFAULT SETTINGS
	// Program defaults are in microns
	DEFAULT_Resolution_um_per_pixel=1.000;		// Image resolution (Default 1 um/pixel)
	DEFAULT_Ridge_Detect_Line_Width_um=6.0;		// Ridge Detect Parameters
	DEFAULT_Ridge_Detect_Low_Contrast_Level=100;
	DEFAULT_Ridge_Detect_High_Contrast_Level=255;
	DEFAULT_Median_Filter_Kernel_Size_um=45;	// For leveling step
	DEFAULT_Anisotropic_Diffusion_sigma_um=3.0; 	// For noise reduction/smoothing step. Used to estimate suitable K value.
	// DEFAULT_Mask_ErosionRadius_um=5.0; 				// Mask Adjustment
	DEFAULT_Line_DilationRadius_um=6.0;				// Ridge detect post processing
	DEFAULT_Gaussian_Blur_sigma_um=6.0;
	DEFAULT_Min_Fiber_Area_um2=200; // ~14um x 14um;		// Fiber size restrictions  (exclude objects too small or too large)
	DEFAULT_Max_Fiber_Area_um2=10000; // ~100um x 100um; 

	User_Selected_Seed_Level_Thresh_Value=-1;   //Used to supress over segmentation of eleongated/obliquely sectioned fibers
	DEFAULT_Seed_Level_Thresh_Value=70;
	
	AutoDetected__Image_Resolution_um_per_pixel=0;
//***** INITIALIZATION (General Parameters)
	DefaultDirectory=getDirectory("current")    //Image default directory located in script directory. User may want to change this.
	ScriptTimeStamp=getTimeStampString();

//***** GLOBAL SCRIPT CONTROL
	ScriptExecutionModeOptions = newArray("EXEC_NORMAL", "EXEC_INTERACTIVE_BASIC", "EXEC_INTERACTIVE_ADVANCED" );
	ScriptExecutionMode=ScriptExecutionModeOptions[1];	

//*****  DOCUMENTATION TXT STRINGS

		
	StartupMsgStr_partA=
		"***   MyoSAT   [Myofiber Segmentation and Analysis Tool]   ***";
	StartupMsgStr_partB=
		"    Automated routine for segmentation and fiber diameter measurement\n" +
		"                    of skeletal muscle cross-sections images";
	StartupMsgStr_partC=		
		"STEPS:\n" +
		"   (1) Select Image file  (*.tif)\n" +
		"   (2) Select Mask file (*.tif)      [optional]\n" +
		"   (3) Adjust detection parameters    (Defaults provide a starting point)\n" +
		"   (4) Run Image Procesing";
	StartupMsgStr_partD=
		"NOTES:\n" +
			"   * Otimized for analysis of Collagen or Laminin IHC antibody labeled sections\n" +
			"   * Requires either 8 bit or 16 bit grayscale images.  (16 bit preferred) \n" +	
			"   * The optional binary mask file may be used to exclude background and other regions \n" +
			"        > 16 bit image Mask Image File.  0 = Exclude   65525 = Include \n" +
			"	     > Mask file may be created using GIMP software.  - See protocol for details \n" +			
			"   * Results are saved to -> ..\\OUTPUT (Image_name) folder";
	StartupMsgStr_partE=
		"AUTHORS:  Mike Sledziona, Courtney Stevens, Kasia Fadeeva, Josh Berenson\n" +
		"\n" +
		"COPYRIGHT:   (c) 2019,2020 Cornell University (College of Veterinary Medicine)";

	// ****************************************

	SP="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
	HelpStr__ConfigParams = "<html>"+
				"<h2>MyoSAT Configuration Page</h2>"+
				"<font size=-1>"+
				"<b>INTRODUCTION </b>"+SP+
				"Default settings provide a starting point for analysis. <br> "+
				"<br>"+
				"<b>TYPICAL USAGE:</b>"+SP+
				"(1) Verify the image resolution setting.  (2) Select <b>RUN [Config Settings (Basic)] </b> to interactively configure/tune the muscle fiber detection settings.<br> "+
				"<br>"+
				"<b>Image Resolution: </b>" +SP+ "Microns per Pixel. REQUIRED. This is used for internal adjustment of image processing settings <br>"+
				"<br>"+
				"<b>DEFINITIONS:</b>"+SP+"<b>D_avg </b> = Fiber Diameter (Average)" + SP + "<b>W</b> =Fiber border (Ridge) Width (approx) <br>"+
				"<br>"+
				"<b>PRIMARY CONFIG PARAMETERS </b> <br>" +
				"<b>* Ridge Detect Line Width: </b> "+SP+" = W <br>" +
				"<b>* Ridge Detect High Contrast Level: </b> [0-255] <br>"+ 				
				SP +"Detected lines will include grayscale above this level. Smaller Values -> Higher Sensitivity to \"Border Like\" features <br>" +
				"<b>* Ridge Detect Low Contrast Level: </b>  [0-255] <br>" +
				SP +"Lines with grayscale levels below this level are excluded. Used to supress detection of low contrast features. Set to 0 as a starting point <br>" +
				"<b>* Seed Level Threshold </b>  [0-255] = value  or [-1] = Interactive Threshold Adjustment <br>" +
				SP +"This setting aids to prevent oversegmenation in the case of elongated cells by combining local minima which are seeds for watershed segmenation <br>" +
				SP +"Typically this is set to [-1] to interactively adjust during image processing steps <br>" +
				"<b>* Min/Max Fiber Size (Area): </b> "+SP+" Exclude detected objects outside this size range ~ [D_min^2 ... D_max^2]  <br>" +
				"<br>" +				
				"<b>FINE TUNING PARAMETERS: </b> <br>" +
				"<b>* Median Filter Kernel Size (nxn): </b> "+SP+"Used for image leveling. Set to ~ D_avg<br>" +
				"<b>* Anisotropic Diffusion Sigma: </b> "+SP+"Used to smooth out image noise. Set to ~ 1/2 W<br>" +
				"<b>* Line Dilation Radius: </b> "+SP+"For final segmentation. Set to ~ W<br>" +	
				"<b>* Gaussian Blur Sigma: </b> "+SP+"For final segmentation.  Set to ~ W<br>" +	
				"<br>" +									
				"<b>SCRIPT EXECUTION OPTIONS: </b> <br>" +
				"<b>* RUN [Use Current Settings]: </b>"+SP+"Use settings above. Minimal user interaction.<br>" +
				"<b>* RUN [Config Settings (Basic)]: </b>"+SP+"Use interactive dialogs to adjust primary settings<br>" +
				"<b>* RUN [Config Settings (Advanced)]: </b>"+SP+"Additional fine tuning adjustments<br>";

//***** STARTUP INTRO MESSAGE
	Dialog.create("MyoSAT  [Myofiber Segmentation and Analysis Tool]  " + SCRIPT_VERSION_STRING);


	Dialog.addMessage(StartupMsgStr_partA);
	Dialog.addMessage(StartupMsgStr_partB);	
	Dialog.addMessage(StartupMsgStr_partC);	
	Dialog.addMessage(StartupMsgStr_partD);	
	Dialog.addMessage(StartupMsgStr_partE);	
	Dialog.show();


//**** CHECK FOR OPEN IMAGEJ WINDOWS  (leftover from prev run?)
	// Provide option to automtically close open images and other windows
	list1 = getList("image.titles");
	list2 = getList("window.titles");

	if ((list1.length>0) || (list2.length>0) ){
		CommandOptionsArray = newArray( "CLOSE WINDOWS & CONTINUE","EXIT" );		
		Dialog.create("SCRIPT ERROR");
		Dialog.addMessage("Please close imageJ windows before proceeding:");
		Dialog.addMessage("** Window List: ** ");
		for (i=0; i<list1.length; i++){
	        Dialog.addMessage("     " + list1[i]);
	  	}
	  	for (i=0; i<list2.length; i++){
	        Dialog.addMessage("     " + list2[i]);
	  	}
	  	Dialog.addChoice("OPTION",CommandOptionsArray,CommandOptionsArray[1]);
		Dialog.show();

		// Option to Exit or Close Windows and Continue
		SCRIPT_COMMAND=Dialog.getChoice();
		if (SCRIPT_COMMAND=="EXIT") {
			exit("Macro Terminated Early");
		} else {
			// close windows
			for (i=0; i<list1.length; i++){
		        selectWindow(list1[i]); 
	         	run("Close"); 
	  		}
		  	for (i=0; i<list2.length; i++){
		        selectWindow(list2[i]); 
	         	run("Close"); 
		  	}
		}	
	}  //end if


//***** OBTAIN MUSCLE IMAGE AND MASK FILE PATHS		
	// Set Default Directory to be in same directory where script resides
	// See:http://imagej.1557.x6.nabble.com/macro-command-to-designate-but-not-open-a-file-td5014926.html   
	call("ij.io.OpenDialog.setDefaultDirectory", DefaultDirectory); 
	ImagePath = File.openDialog("Select Image File (*.tif)");
	ImageDir= File.getParent(ImagePath);
	ImageFileName=File.getName(ImagePath);

	
	UseMaskImage=getBoolean("Select a mask image?","Use Mask Image","No Mask Image");
	MaskImageFilePath = "";
	MaskImageFileDir = "";
	MaskImageFileName = "";
	if (UseMaskImage==1){
		MaskImageFilePath = File.openDialog("Select Foreground Mask File (*.tif)  # Must be in same Directory #");
		MaskImageFileDir= File.getParent(MaskImageFilePath);
		MaskImageFileName=File.getName(MaskImageFilePath);
	}

//**** Deterimine Operating System for filepath format
	os = getInfo("os.name");
	WindowsOS = startsWith(os, "Windows");



//**** Attempt to autodetect image resolution
	_ProgressWindowTitle=initProgressWindow(100);
	updateProgressWindow(_ProgressWindowTitle,"AUTODETECT IMAGE RESOLUTION","");
	//!!!!!!!!!!! Fix this
	//open(ImageDir+"//"+ ImageFileName);
	if (WindowsOS==true){open(ImageDir+"\\"+ ImageFileName);
	}
	else {open(ImageDir+"//"+ ImageFileName);
	}
	
	
	rename("IMAGE");
	getPixelSize (unit, pixelWidth, pixelHeight);
	if (unit=="microns" || unit=="µm" || unit=="um"){
		AutoDetected__Image_Resolution_um_per_pixel=pixelWidth;
		updateProgressWindow(_ProgressWindowTitle,"Resolution: " + AutoDetected__Image_Resolution_um_per_pixel  + " [microns per pixel]","");
	}else{
			updateProgressWindow(_ProgressWindowTitle,"Resolution:   N/A","");
	}	
	wait(1000);
	close("IMAGE");
	selectWindow(_ProgressWindowTitle); 
	run("Close");


	

//***** MAIN SCRIPT CONFIGURATION DIALOG
	CommandOptionsArray = newArray( "RUN [Use Current Settings]", "RUN [Config Settings (Basic)]", "RUN [Config Settings (Advanced)]", "LOAD DEFAULTS" );	//Dialog command option list
	SCRIPT_COMMAND="LOAD DEFAULTS";

	
	// Initialize image processing parameters with default values.
	// Can modify them in this Dialog page
	Image_Resolution_um_per_pixel=DEFAULT_Resolution_um_per_pixel;
	do {
		if (SCRIPT_COMMAND=="LOAD DEFAULTS"){
			//Variable Parameters (These are image resolution invariant (ie values in um)
			
			Ridge_Detect_Line_Width_um=DEFAULT_Ridge_Detect_Line_Width_um;
			Ridge_Detect_High_Contrast_Level=DEFAULT_Ridge_Detect_High_Contrast_Level;  
			Ridge_Detect_Low_Contrast_Level=DEFAULT_Ridge_Detect_Low_Contrast_Level;
			Min_Fiber_Area_um2=DEFAULT_Min_Fiber_Area_um2;
			Max_Fiber_Area_um2=DEFAULT_Max_Fiber_Area_um2;
	
			Median_Filter_Kernel_Size_um=DEFAULT_Median_Filter_Kernel_Size_um;
			Anisotropic_Diffusion_sigma_um=DEFAULT_Anisotropic_Diffusion_sigma_um;  
			//Mask_ErosionRadius_um=DEFAULT_Mask_ErosionRadius_um; 
			Line_DilationRadius_um=DEFAULT_Line_DilationRadius_um;
			Gaussian_Blur_sigma_um=DEFAULT_Gaussian_Blur_sigma_um;
		}
		if (AutoDetected__Image_Resolution_um_per_pixel >0){
			Image_Resolution_um_per_pixel=AutoDetected__Image_Resolution_um_per_pixel;
		}
		 
		Dialog.create("MyoSAT  [Myofiber Segmentation and Analysis Tool]  " + SCRIPT_VERSION_STRING);
		Dialog.addString("Source Image Dir",ImageDir,100);
		Dialog.addString("Image",ImageFileName,40);
		Dialog.addString("Mask Image",MaskImageFileName,40);
		Dialog.addMessage(".                       [ Blank = No Mask Image ]");
		Dialog.addMessage("");
		Dialog.addCheckbox("H&E stained image", false)
		Dialog.addMessage("(Leave unchecked for collagen V IHC labeled images)");
		Dialog.addMessage("");
		Dialog.addNumber("Image Resolution:  ", Image_Resolution_um_per_pixel ,4,10,"µm/pixel    [REQUIRED]");
		Dialog.addMessage("[ ** Select: \"RUN [Config Settings (...)]\" to interactively adjust parameters  ** ]")
		Dialog.addMessage("PRIMARY CONFIG PARAMS:");
		Dialog.addNumber("Ridge Detect Line Width", Ridge_Detect_Line_Width_um ,1,10,"µm");
		Dialog.addNumber("Ridge Detect High Contrast Level", Ridge_Detect_High_Contrast_Level ,0,10,"[0-255]");	
		Dialog.addNumber("Ridge Detect Low Contrast Level", Ridge_Detect_Low_Contrast_Level ,0,10,"[0-255]");
		Dialog.addNumber("Seed Level Threshold", User_Selected_Seed_Level_Thresh_Value,0,10," [0-255] or [-1] = Interactive Threshold Adjustment");
		Dialog.addNumber("Min Fiber Size (Area)", Min_Fiber_Area_um2,1,10,"µm^2" );
		Dialog.addNumber("Max Fiber Size (Area)", Max_Fiber_Area_um2,1,10,"µm^2" );
		
		Dialog.addMessage("FINE TUNING:");
		Dialog.addNumber("Median Filter Kernel Size (nxn)",Median_Filter_Kernel_Size_um,1,10,"µm" );
		Dialog.addNumber("Anisotropic Diffusion Sigma", Anisotropic_Diffusion_sigma_um,1,10,"µm" );
		Dialog.addNumber("Line Dilation Radius", Line_DilationRadius_um,1,10,"µm" );
		Dialog.addNumber("Gaussian Blur Sigma", Gaussian_Blur_sigma_um,1,10,"µm" );
		
		//Dialog.addNumber("Mask Erosion Radius", Mask_ErosionRadius_um,1,10,"um" );
	
		Dialog.addChoice("COMMAND",CommandOptionsArray,CommandOptionsArray[0]);
		Dialog.addMessage(".                      [ ** Click \"Help\" for Usage Instructions ** ]");
		Dialog.addHelp(HelpStr__ConfigParams);		
		Dialog.show();
		
		
		//*** Get configuration
		ImageDir=Dialog.getString();
		ImageFileName=Dialog.getString();
		MaskImageFileName=Dialog.getString();
		HE_stain=Dialog.getCheckbox();
		// Update 6/2/2020 -MS.  Hide Part A,Part B checkboxes
		EXECUTE_PART_A=true;
		EXECUTE_PART_B=true;
		Image_Resolution_um_per_pixel=Dialog.getNumber();

	
		Ridge_Detect_Line_Width_um=Dialog.getNumber();
		Ridge_Detect_High_Contrast_Level=Dialog.getNumber();
		Ridge_Detect_Low_Contrast_Level=Dialog.getNumber();
		User_Selected_Seed_Level_Thresh_Value=Dialog.getNumber();
		Min_Fiber_Area_um2=Dialog.getNumber();
		Max_Fiber_Area_um2=Dialog.getNumber();
	

		Median_Filter_Kernel_Size_um=Dialog.getNumber();
		Anisotropic_Diffusion_sigma_um=Dialog.getNumber();
		Line_DilationRadius_um=Dialog.getNumber();
		Gaussian_Blur_sigma_um=Dialog.getNumber();
		//Mask_ErosionRadius_um=Dialog.getNumber();
		
		SCRIPT_COMMAND=Dialog.getChoice();
	
	} while (substring(SCRIPT_COMMAND,0,3)!="RUN")      

	// Set script execution mode
	if(SCRIPT_COMMAND=="RUN [Use Current Settings]"){
		ScriptExecutionMode=ScriptExecutionModeOptions[0];  // "EXEC_NORMAL"
	} else if (SCRIPT_COMMAND=="RUN [Config Settings (Basic)]") {
		ScriptExecutionMode=ScriptExecutionModeOptions[1];	// "EXEC_INTERACTIVE_BASIC"
	} else if (SCRIPT_COMMAND=="RUN [Config Settings (Advanced)]") {
		ScriptExecutionMode=ScriptExecutionModeOptions[2];	// "EXEC_INTERACTIVE_ADVANCED"
	}

	


//*****  Compute image processing variables (microns -> pixels)
	pixels_per_um=(1/Image_Resolution_um_per_pixel); //pixels/um
	
	Anisotropic_Diffusion_k=(squared(Anisotropic_Diffusion_sigma_um))/(squared(Image_Resolution_um_per_pixel));
	Ridge_Detect_Line_Width_Pixels=Ridge_Detect_Line_Width_um/Image_Resolution_um_per_pixel;
	//Mask_ErosionRadius_Pixels=round(Mask_ErosionRadius_um/Image_Resolution_um_per_pixel);
	Line_DilationRadius_Pixels=round(Line_DilationRadius_um/Image_Resolution_um_per_pixel);
	Gaussian_Blur_sigma_Pixels=Gaussian_Blur_sigma_um/Image_Resolution_um_per_pixel;
	Median_Filter_Kernel_Size_Pixels=round(Median_Filter_Kernel_Size_um/Image_Resolution_um_per_pixel);
	//for .4620 um/pixel this is approximately 1,000-50,000 pixel^2 units
	Min_Fiber_Area_Pixels=round(Min_Fiber_Area_um2/(squared(Image_Resolution_um_per_pixel))); 
	Max_Fiber_Area_Pixels=round(Max_Fiber_Area_um2/(squared(Image_Resolution_um_per_pixel))); 

//*****  Additional Initialization
	if (WindowsOS==true){
	ImageDir=ImageDir+"\\"; 
	}
	else {ImageDir=ImageDir+"//"; 
	}
	_ProgressWindowTitle=initProgressWindow(75);

//****   CHECK FOR REQUIRED PLUGINS
	updateProgressWindow(_ProgressWindowTitle,"CHECKING FOR REQUIRED PLUGINS","");

	// List of external Required plugins Packages			
	PluginCommand_List = newArray;
	PluginPackage_List= newArray;
	PluginsHelp_List= newArray;
	  		
	// Fast Median ...
	PluginCommand_List=appendToList(PluginCommand_List,"Fast Median ...");
	PluginPackage_List= appendToList(PluginPackage_List,"ij-Plugins");
	// Perona-Malik
	PluginCommand_List=appendToList(PluginCommand_List,"Perona-Malik Anisotropic Diffusion ...");
	PluginPackage_List= appendToList(PluginPackage_List,"ij-Plugins");
	// Ridge Detection
	PluginCommand_List=appendToList(PluginCommand_List,"Ridge Detection");
	PluginPackage_List= appendToList(PluginPackage_List,"Biomedgroup");
	// MorpholibJ
	PluginCommand_List=appendToList(PluginCommand_List,"Morphological Filters");
	PluginPackage_List= appendToList(PluginPackage_List,"IJPB-plugins");
	// Clasic Watershed
	PluginCommand_List=appendToList(PluginCommand_List,"Classic Watershed");
	PluginPackage_List= appendToList(PluginPackage_List,"IJPB-plugins");

	PlugInsOK=1;
	List.setCommands;
	for (i=0; i<PluginCommand_List.length; i++)  {
		ReportString="";   // Reports if Plugin is Installed			
		IsInstalled=(List.get(PluginCommand_List[i])!="");
		if (IsInstalled==1){
			ReportString="OK";
		} else {
			ReportString="NOT-INSTALLED";
			PlugInsOK=0;
		}
		print("     #PLUGIN PACKAGE:  " + PluginPackage_List[i] + "  ~   " +  PluginCommand_List[i] + "     " + ReportString);
										
	}	

	if (PlugInsOK==0){
		print("ERROR:  Missing ImageJ Plugins");
		exit("ERROR:  Missing ImageJ Plugins. Add FIJI update sites");		
	}

	print("**********************************");
	print("*  Part A: Image Pre-Processing");
	print("**********************************");		
	updateProgressWindow(_ProgressWindowTitle,"# START PART A IMAGE PROCESSING #","");


//**** CREATE OUTPUT DIRECTORY	
	//Image name without ".tif" extension
	ImageFileBaseName=substring(ImageFileName, 0, lastIndexOf(ImageFileName,"."));
			
	//Create output directory
	if (WindowsOS==true){
		OutputDir=ImageDir + "OUTPUT" + "  (" + ImageFileBaseName + ")" + "\\";
	}
	else {OutputDir=ImageDir + "OUTPUT" + "  (" + ImageFileBaseName + ")" + "//"; 
	}	
	File.makeDirectory(OutputDir);
	if (!File.exists(OutputDir))
		      exit("Unable to create OUTPUT directory");
	else {
		  	print("OUTPUT Dir Created");
	}

	//Create temp file directory
	if (WindowsOS==true){
		TempFileDir=OutputDir + "TEMP_FILES\\";
	}
	else {TempFileDir=OutputDir + "TEMP_FILES//";
	}	
	File.makeDirectory(TempFileDir);
	if (!File.exists(TempFileDir)){
		exit("Unable to create TEMP_FILES directory");
	} else {
		print("TEMP_FILES Dir Created");
	}
	


//**********************************************
//**** IMAGE PROCESSING ROUTINES START HERE	****	
//**********************************************
				
//**** LOAD IMAGE
	print("** Loading Image:  " + ImageFileName);				
	updateProgressWindow(_ProgressWindowTitle,"LOADING IMAGE","");							
	open(ImageDir+ImageFileName);
	selectWindow(ImageFileName);		
	rename("ORIGINAL_IMAGE");
	saveAs("Tiff", TempFileDir + "__ORIGINAL.tif");
	rename("ORIGINAL_IMAGE");
	run("Set Scale...", "distance=" + pixels_per_um + " known=1 unit=micron"); //Not sure if this is necessary


//For H&E Images
if (HE_stain ==true){
	selectWindow("ORIGINAL_IMAGE");
	run("Colour Deconvolution", "vectors=H&E");
	close();
	selectWindow("ORIGINAL_IMAGE-(Colour_1)");
	close();
	selectWindow("ORIGINAL_IMAGE");
	saveAs("Tiff", TempFileDir + "__ORIGINAL_H&E.tif");
	close();
	selectWindow("Colour Deconvolution");
	close();
	selectWindow("ORIGINAL_IMAGE-(Colour_2)");
	run("Grays");
	saveAs("Tiff", TempFileDir + "__ORIGINAL.tif");
	rename("ORIGINAL_IMAGE");
}


//**** IMAGE LEVELING / SMOOTHING

	//**********************************************
	// CODE BLOCK:   INTERACTIVE PARAMETER ADJUSTMENT: MEDIAN FILTER   (SELF CONTAINED)			
	if (ScriptExecutionMode==ScriptExecutionModeOptions[2]){
		CommandOptionsArray = newArray( "PREVIEW","SET" );
		SCRIPT_COMMAND="SET";
		do{					
			Dialog.create("FAST MEDIAN FILTER");
			Dialog.addNumber("Median Filter Kernel Size [um]", Median_Filter_Kernel_Size_um ,1,10,"µm");	
			Dialog.addChoice("MODE: ",CommandOptionsArray,CommandOptionsArray[0]);
			Dialog.show();
			Median_Filter_Kernel_Size_um=Dialog.getNumber();
			SCRIPT_COMMAND=Dialog.getChoice();
			if (isOpen("PREVIEW_RESULT")){
				close("PREVIEW_RESULT");
			}
			if (isOpen("PREVIEW_RESULT_MEDIAN_FILTER")){
				close("PREVIEW_RESULT_MEDIAN_FILTER");
			}
			selectImage("ORIGINAL_IMAGE");
			run("Duplicate...", "title=PREVIEW_RESULT");
			run("Duplicate...", "title=PREVIEW_RESULT_1");				
			selectImage("PREVIEW_RESULT");
			Median_Filter_Kernel_Size_Pixels=round(Median_Filter_Kernel_Size_um/Image_Resolution_um_per_pixel);
			run("Fast Median ...", "filter=" + Median_Filter_Kernel_Size_Pixels); 
			rename("PREVIEW_RESULT_MEDIAN_FILTER"); 
			imageCalculator("Divide create 32-bit", "PREVIEW_RESULT_1","PREVIEW_RESULT_MEDIAN_FILTER");
			rename("PREVIEW_RESULT");
			close("PREVIEW_RESULT_1");
		} while (SCRIPT_COMMAND!="SET") 				
		if (isOpen("PREVIEW_RESULT")){
						close("PREVIEW_RESULT");
		}  
		if (isOpen("PREVIEW_RESULT_MEDIAN_FILTER")){
						close("PREVIEW_RESULT_MEDIAN_FILTER");
		} 
		selectImage("ORIGINAL_IMAGE");
	} // end Interactive Parameter Adjustment
	//**********************************************
				
				
	updateProgressWindow(_ProgressWindowTitle,"APPLYING MEDIAN FILTER","");				
	print("** MEDIAN FILTER **" + ImageFileName);
	run("Fast Median ...", "filter=" + Median_Filter_Kernel_Size_Pixels); 
	print("Fast Median ...", "filter=" + Median_Filter_Kernel_Size_Pixels);
	rename("MEDIAN_FILTERED_IMAGE");
	saveAs("Tiff", TempFileDir  + "__MEDIAN.tif");
	rename("MEDIAN_FILTERED_IMAGE");
					
	updateProgressWindow(_ProgressWindowTitle,"LEVELING IMAGE","");
						
	print("** LEVELING STEP **");
	TempImagePath=TempFileDir  + "__ORIGINAL.tif";
	print(TempImagePath);
	open(TempImagePath);
	rename("ORIGINAL_IMAGE");
	imageCalculator("Divide create 32-bit", "ORIGINAL_IMAGE","MEDIAN_FILTERED_IMAGE");
				
	rename("LEVELED_IMAGE");

				
	selectWindow("MEDIAN_FILTERED_IMAGE"); 
	run("Close"); 
	selectWindow("ORIGINAL_IMAGE"); 
	run("Close"); 
				
	//Status: LEVELED_IMAGE is only open window
				
	run("Multiply...", "value=50");
	setMinAndMax(0, 255);
	selectWindow("LEVELED_IMAGE"); 
	saveAs("Tiff", TempFileDir  + "__LEVELED.tif");						
	rename("LEVELED_IMAGE");


	//**********************************************
	// CODE BLOCK:   INTERACTIVE PARAMETER ADJUSTMENT: PERONA-MALIK ANISOTROPIC DIFFUSION (SELF CONTAINED)			
	if (ScriptExecutionMode==ScriptExecutionModeOptions[2]){
		CommandOptionsArray = newArray( "PREVIEW","SET" );
		SCRIPT_COMMAND="SET";
		do{					
			Dialog.create("PERONA-MALIK DIFFUSION FILTER");
			Dialog.addNumber("Anisotropic Diffusion Sigma", Anisotropic_Diffusion_sigma_um ,1,10,"µm");	
			Dialog.addChoice("MODE: ",CommandOptionsArray,CommandOptionsArray[0]);
			Dialog.show();
			Anisotropic_Diffusion_sigma_um=Dialog.getNumber();
			SCRIPT_COMMAND=Dialog.getChoice();
			if (isOpen("PREVIEW_RESULT")){
				close("PREVIEW_RESULT");
			}
			selectImage("LEVELED_IMAGE");
			run("Duplicate...", "title=PREVIEW_RESULT");				
			selectImage("PREVIEW_RESULT");
			Anisotropic_Diffusion_k=(squared(Anisotropic_Diffusion_sigma_um))/(squared(Image_Resolution_um_per_pixel));
			run("Perona-Malik Anisotropic Diffusion ...", "k=" + Anisotropic_Diffusion_k + " mean_square_error=0.01 number_of_iterations=100 time_step=0.05 use_big_region_function");
			close("PREVIEW_RESULT");
			selectImage("Peron-Malik Anisotropic Diffusion");
			rename("PREVIEW_RESULT"); 
		} while (SCRIPT_COMMAND!="SET") 
					
		if (isOpen("PREVIEW_RESULT")){
						close("PREVIEW_RESULT");
		}  
		selectImage("LEVELED_IMAGE");
	} // end Interactive Parameter Adjustment
	//**********************************************

				
	updateProgressWindow(_ProgressWindowTitle,"PERONA-MALIK DIFFUSION","");
				
	print("** PERONA-MALIK DIFFUSION STEP **");
	run("Perona-Malik Anisotropic Diffusion ...", "k=" + Anisotropic_Diffusion_k + " mean_square_error=0.01 number_of_iterations=100 time_step=0.05 use_big_region_function");
	rename("ANISO_IMAGE");
	selectWindow("LEVELED_IMAGE"); 
	run("Close"); 
	selectWindow("ANISO_IMAGE");			
	run("8-bit");
	// Save anisotropic image
	saveAs("Tiff", TempFileDir +  "__ANISO.tif");		
	
	selectWindow("__ANISO.tif");
	// Intensity boundaries
	run("32-bit");
	run("Square");
	run("Square");
	setMinAndMax(0.000000000, 60000000.000000000);
	run("8-bit");

	saveAs("Tiff", TempFileDir +  "__PRERIDGE.tif");	
	
//**** RIDGE DETECTION		
	updateProgressWindow(_ProgressWindowTitle,"RIDGE DETECTION","");
	print("** RIDGE DETECTION STEP **");
	
	//**********************************************
	// CODE BLOCK:   INTERACTIVE PARAMETER ADJUSTMENT: RIDGE DETECTION
	if (ScriptExecutionMode==ScriptExecutionModeOptions[1] || ScriptExecutionMode==ScriptExecutionModeOptions[2]){
		CommandOptionsArray = newArray( "PREVIEW","SET" );
		SCRIPT_COMMAND="SET";
		run("Ridge Detection","line_width=" + Ridge_Detect_Line_Width_Pixels + " high_contrast="+Ridge_Detect_High_Contrast_Level+" low_contrast=" + Ridge_Detect_Low_Contrast_Level + " extend_line method_for_overlap_resolution=NONE minimum_line_length=0 maximum=0" );
		do{
			Dialog.create("SET RIDGE DETECT PARAMETERS");
			Dialog.addNumber("Ridge Detect Line Width [um]", Ridge_Detect_Line_Width_um ,1,10,"µm");
			Dialog.addSlider("Upper Contrast Threshold [0-255]", 0, 255, Ridge_Detect_High_Contrast_Level);
			Dialog.addSlider("Lower Contrast Threshold [0-255]", 0, 255,Ridge_Detect_Low_Contrast_Level);
								
			Dialog.addMessage("Image Resolution: " + Image_Resolution_um_per_pixel + " µm/pixel");						
			Dialog.addMessage(" ** Click \"Help\" for Instructions **");
			Dialog.addChoice("MODE: ",CommandOptionsArray,CommandOptionsArray[0]);
			html = "<html>"
			+"<h2>RIDGE DETECT PARAMETERS</h2>"
			+"<font size=-1>"
			+"<b>Ridge Detect Line Width</b> [um] <br>"
			+"Adjust to approximate fiber boundary width<br>"
			+"<b>Upper Contrast Threshold </b> [0-255]<br>"
			+"Smaller Values -> Higher Line Detection Sensitivity<br>"
			+"<b>Lower Contrast Threshold </b> [0-255]<br>"
			+"Used to supress low contrast lines, can set to 0<br>"
			+"<br>"
			+"<b>MODE=PREVIEW </b> to preview changes<br>"
			+"<b>MODE=SET </b> to keep settings and continue to next step<br>";
			Dialog.addHelp(html);
			Dialog.show();
			Ridge_Detect_Line_Width_um=Dialog.getNumber();
			Ridge_Detect_High_Contrast_Level=Dialog.getNumber();
			Ridge_Detect_Low_Contrast_Level=Dialog.getNumber();
			SCRIPT_COMMAND=Dialog.getChoice();
					
			// Input value checking
			// !!!! add to these
			if (Ridge_Detect_Low_Contrast_Level>Ridge_Detect_High_Contrast_Level){
				Ridge_Detect_Low_Contrast_Level=Ridge_Detect_High_Contrast_Level;
				SCRIPT_COMMAND="PREVIEW";
			}
			//Test Ridge detect result
			run("Ridge Detection","line_width=" + Ridge_Detect_Line_Width_Pixels + " high_contrast="+Ridge_Detect_High_Contrast_Level+" low_contrast=" + Ridge_Detect_Low_Contrast_Level + " extend_line method_for_overlap_resolution=NONE minimum_line_length=0 maximum=0" );
		} while (SCRIPT_COMMAND!="SET") 
	} // End Interactive Parameter Adjustment
	//**********************************************
		
	run("Ridge Detection", "line_width=" + Ridge_Detect_Line_Width_Pixels + " high_contrast="+Ridge_Detect_High_Contrast_Level+" low_contrast=" + Ridge_Detect_Low_Contrast_Level + " extend_line displayresults add_to_manager method_for_overlap_resolution=NONE minimum_line_length=0 maximum=0");
	run("Multiply...", "value=0");
	run("Flatten");
	setOption("BlackBackground", false);
	setThreshold(0, 131);
	run("Convert to Mask");
	saveAs("Tiff", TempFileDir  +  "__RIDGE.tif");
	run("Close"); 
	run("Close"); 
	selectWindow("Results");
	run("Close"); 
	selectWindow("Junctions");
	run("Close"); 
	selectWindow("ROI Manager");
	run("Close"); 
	selectWindow("Summary");
	run("Close");	


//****************************
//**** PART B Image Processing
//**** Can run this part of the script by itself if needed for debugging
//****************************

//*** RIDGE IMAGE ADJUSTMENT (Dilation)
	updateProgressWindow(_ProgressWindowTitle,"ADJUSTING RIDGE MASK","");		
	//Mask off Ridge Image
	print("** RIDGE IMAGE MASKING STEP **\n");		
	RidgeImageFileName=  "__RIDGE.tif";
	open(TempFileDir + RidgeImageFileName);
	selectWindow(RidgeImageFileName);
	run("Morphological Filters", "operation=Dilation element=Disk radius="+Line_DilationRadius_Pixels);
	rename("RIDGE_IMAGE_DILATED");
	run("Invert LUT");
	setThreshold(0, 131);
	run("Convert to Mask");
	run("Invert LUT");  //needed for make binary
	selectWindow(RidgeImageFileName);
	run("Close");
		
	//Load the Mask Image 
	if (DebugMode==true){
		waitForUser("DEBUG", "RIDGE MASKING STEP COMPLETE");
	}

//**** APPLY MASK IMAGE IF AVAILABLE	
	updateProgressWindow(_ProgressWindowTitle,"LOADING MASK IMAGE","");

	// Integrate Mask in ridge detection
	if (MaskImageFileName==""){
		updateProgressWindow(_ProgressWindowTitle,"NO MASK IMAGE AVAILABLE... CONTINUING","");
	}else{
		open(ImageDir + MaskImageFileName);
		run("8-bit");
		selectWindow(MaskImageFileName);
		rename("MASK_IMAGE");
		setThreshold(0, 131);
		run("Convert to Mask");
			
		if (DebugMode==true){
			waitForUser("DEBUG", "MASK MAKE BINARY STEP COMPLETE");
		}
			
		run("Invert");
		run("Invert LUT");
		//run("Morphological Filters", "operation=Erosion element=Disk radius="+Mask_ErosionRadius_Pixels);
	
		if (DebugMode==true){
			waitForUser("DEBUG", "RIDGE MASK EROSION STEP COMPLETE");
		}
				
		//selectWindow("MASK_IMAGE");
		//run("Close");
		//selectWindow("MASK_IMAGE-Erosion");
		//rename("MASK_IMAGE");
		imageCalculator("AND create", "RIDGE_IMAGE_DILATED","MASK_IMAGE");			
		selectWindow("RIDGE_IMAGE_DILATED");
		run("Close");
		selectWindow("MASK_IMAGE");
		run("Close");	
		
		if (DebugMode==true){
			waitForUser("DEBUG", "RIDGE IMAGE DILATION COMPLETE");
		}
	}  // end if/else

//**** APPLY GAUSSIAN BLUR TO MASKED RIDGE IMAGE		
	updateProgressWindow(_ProgressWindowTitle,"GAUSSIAN BLUR","");

	if (MaskImageFileName==""){
		selectWindow("RIDGE_IMAGE_DILATED");
	}else{
		selectWindow("Result of RIDGE_IMAGE_DILATED");
	}
	
	run("Invert");
	setThreshold(0, 131);
	run("Convert to Mask");
	run("Invert");  //NEEDED TO ADD THIS!
		
	run("Gaussian Blur...", "sigma=" + Gaussian_Blur_sigma_Pixels);
	saveAs("Tiff", TempFileDir +  "__BLURRED.tif");
		
	if (DebugMode==true){
		waitForUser("DEBUG", "GAUSSIAN BLUR COMPLETE");
	}
	
		
//**** SEED LEVEL THRESHOLDING		
	updateProgressWindow(_ProgressWindowTitle,"SEED LEVEL THRESHOLD ADJUSTMENT","");

	CommandOptionsArray = newArray( "PREVIEW","SET" );
	SCRIPT_COMMAND="SET";
	selectWindow("__BLURRED.tif");
	rename("THRESHOLD ADJUSTMENT");
	if ((User_Selected_Seed_Level_Thresh_Value<0) || ScriptExecutionMode==ScriptExecutionModeOptions[1] || ScriptExecutionMode==ScriptExecutionModeOptions[2]){
		if (User_Selected_Seed_Level_Thresh_Value<0) {
		User_Selected_Seed_Level_Thresh_Value=DEFAULT_Seed_Level_Thresh_Value=70;
		}
		selectWindow("THRESHOLD ADJUSTMENT");
		setThreshold(0, User_Selected_Seed_Level_Thresh_Value);
		DisplayLocalMinima=false;

		do{
			Dialog.create("SET SEED LEVEL THRESHOLD");
			Dialog.addSlider("Threshold Setting", 0, 255, User_Selected_Seed_Level_Thresh_Value);
			Dialog.addCheckbox("Display Local Minima" ,DisplayLocalMinima );
			Dialog.addChoice("MODE:",CommandOptionsArray,CommandOptionsArray[0]);
			Dialog.addMessage("Select 'SET' from the drop down menu above to procede to next step")		
			Dialog.addMessage(" ** Click \"Help\" for Instructions **");
	
			html = "<html>"
					+"<h2>SEED LEVEL THRESHOLD</h2>"
					+"<font size=-1>"
					+"<b>Threshold Setting</b> [0-255] <br>"			
					+ "<br>"
					+"Seed locations for watershed segmentation are established by local minima in the current (blurred) image <br>"
					+ "Oversegmentation can result in cases of elongated fibers due to non-oblique sectioning<br>"
					+ "due to multiple local minima (seed locations) appearing within individual fibers<br>"
					+ "This step aids to supress over-segmentation of the image<br>"
					+ "<br>"
					+ "Adjust this threshold above 0 to suppress multiple local minima within individual fibers <br>"
					+ "Local minima in the red regions will be combined <br>"
					+ "Ideally there will be just one local minimum per fiber. <br>"
					+ "Optimum threshold value will typically be in range [0 - 100] <br>"
					+ "<br>"
					
					+ "<b>WARNING:<\b> Setting this threshold too high will result in under segmentation <br>"
					+"The red regions should not be allowed to spill over into adjacent fibers <br>"
					+"<br>"
					+"<b>MODE=PREVIEW </b> to preview changes<br>"
					+"<b>MODE=SET </b> to keep settings and continue to next step<br>";
			Dialog.addHelp(html);
			Dialog.show();
			User_Selected_Seed_Level_Thresh_Value=Dialog.getNumber();			
			DisplayLocalMinima=Dialog.getCheckbox();
			setThreshold(0, User_Selected_Seed_Level_Thresh_Value);
			if (DisplayLocalMinima==true){
				run("Find Maxima...", "prominence=0 above output=[Point Selection]");
			}else {
				run("Select None");
			}		
			SCRIPT_COMMAND=Dialog.getChoice();
		} while (SCRIPT_COMMAND!="SET") 
	}
	// Apply threshold to image
	selectWindow("THRESHOLD ADJUSTMENT");
	run("Subtract...", "value="+User_Selected_Seed_Level_Thresh_Value);
	run("Add...", "value="+User_Selected_Seed_Level_Thresh_Value);
	run("Find Maxima...", "prominence=0 above output=[Point Selection]");
	rename("BLURRED_IMAGE");
		
	// Remove the red threshold overlay. Not sure how to do this otherwise
	run("Brightness/Contrast...");
	selectWindow("B&C");
	run("Close");

// ADJUST MASK IMAGE (USE EROSION TO DEAL
	if (MaskImageFileName!=""){
		updateProgressWindow(_ProgressWindowTitle,"RELOAD FOREGROUND MASK","");		
			
		//Load the Mask Image 
		open(ImageDir + MaskImageFileName);
		run("8-bit");
		selectWindow(MaskImageFileName);
		rename("MASK_IMAGE");
		setThreshold(0, 131);
		run("Convert to Mask");
		//run("Make Binary");
		run("Invert");
		run("Invert LUT");
		//Removed 6/7/2020 -MS
		//run("Morphological Filters", "operation=Erosion element=Disk radius="+Mask_ErosionRadius_Pixels);
		//selectWindow("MASK_IMAGE");
		//run("Close");
		//selectWindow("MASK_IMAGE-Erosion");
		//rename("MASK_IMAGE");
	} // end if
		

//**** GENERATE LOG FILE
		ParameterLogStringA="";
		ParameterLogStringA=ParameterLogStringA+"TIMESTAMP:\t"+ScriptTimeStamp+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"SCRIPT_NAME:\t"+SCRIPT_NAME+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"TSCRIPT_VERSION_STRING:\t"+SCRIPT_VERSION_STRING+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"IMAGE FILES"+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"-----------"+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"ImageDir:\t"+ImageDir+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"ImageFileName:\t"+ImageFileName+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"MaskImageFileName:\t"+MaskImageFileName+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"USER_ADJUSTABLE_INPUT_PARAMS"+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"----------------------------"+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Image_Resolution_um_per_pixel:\t"+Image_Resolution_um_per_pixel+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Median_Filter_Kernel_Size_um:\t"+Median_Filter_Kernel_Size_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Anisotropic_Diffusion_sigma_um:\t"+Anisotropic_Diffusion_sigma_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Ridge_Detect_Line_Width_um:\t"+Ridge_Detect_Line_Width_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Ridge_Detect_High_Contrast_Level:\t"+Ridge_Detect_High_Contrast_Level+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Ridge_Detect_Low_Contrast_Level:\t"+Ridge_Detect_Low_Contrast_Level+"\r\n";
		//ParameterLogStringA=ParameterLogStringA + " Mask_ErosionRadius_um:\t"+Mask_ErosionRadius_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Line_DilationRadius_um:\t"+Line_DilationRadius_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Gaussian_Blur_sigma_um:\t"+Gaussian_Blur_sigma_um+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Min_Fiber_Area_um2:\t"+Min_Fiber_Area_um2+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Max_Fiber_Area_um2:\t"+Max_Fiber_Area_um2+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Seed_Level_Thresh_Value:\t"+User_Selected_Seed_Level_Thresh_Value+"\r\n"; 
		ParameterLogStringA=ParameterLogStringA+"\r\n";
		ParameterLogStringA=ParameterLogStringA+"COMPUTED_PROCESSING_PARAMS"+"\r\n";
		ParameterLogStringA=ParameterLogStringA+" -----------------"+"\r\n";
		ParameterLogStringA=ParameterLogStringA + " Median_Filter_Kernel_Size_Pixels:\t"+Median_Filter_Kernel_Size_Pixels+"\r\n";		
		ParameterLogStringA=ParameterLogStringA+" Anisotropic_Diffusion_k:\t"+Anisotropic_Diffusion_k+"\r\n"; 
		ParameterLogStringA=ParameterLogStringA+" Ridge_Detect_Line_Width_Pixels:\t"+Ridge_Detect_Line_Width_Pixels+"\r\n";
		//ParameterLogStringA=ParameterLogStringA+" Mask_ErosionRadius_Pixels:\t"+Mask_ErosionRadius_Pixels+"\r\n";
		ParameterLogStringA=ParameterLogStringA+" Line_DilationRadius_Pixels:\t"+Line_DilationRadius_Pixels+"\r\n"; 
		ParameterLogStringA=ParameterLogStringA+" Gaussian_Blur_sigma_Pixels:\t"+Gaussian_Blur_sigma_Pixels+"\r\n"; 
		ParameterLogStringA=ParameterLogStringA+" Min_Fiber_Area_Pixels:\t"+Min_Fiber_Area_Pixels+"\r\n";
		ParameterLogStringA=ParameterLogStringA+" Max_Fiber_Area_Pixels:\t"+Max_Fiber_Area_Pixels+"\r\n";
						
		run("Text Window...", "name="+ "[SCRIPT PARAMETERS]" +" width=75 height=20 monospaced");	
		print("[SCRIPT PARAMETERS]",ParameterLogStringA);
	
		output_parameters_fid = File.open(OutputDir  + "SETTINGS_LOG.txt");		
		print(output_parameters_fid,ParameterLogStringA);
		File.close(output_parameters_fid);


//**** CLASSIC WATERSHED

	updateProgressWindow(_ProgressWindowTitle,"WATERSHED DETECTION","");
	
	selectWindow("BLURRED_IMAGE");	
	// Watershed Detection
	if (MaskImageFileName!=""){
		run("Classic Watershed", "input=BLURRED_IMAGE mask=MASK_IMAGE use min=0 max=255");
		rename("WATERSHED_RESULT");
		close("BLURRED_IMAGE");
		close("MASK_IMAGE");
	}else {
		run("Classic Watershed", "input=BLURRED_IMAGE  use min=0 max=255");
		rename("WATERSHED_RESULT");
		close("BLURRED_IMAGE");			
	}
		
	selectWindow("WATERSHED_RESULT");
	run("8-bit");
	//setAutoThreshold("Default");
	setThreshold(0, 0);
	run("Convert to Mask");
	//Update 6/2/2020 do not dilate to avoid mask distortion
	//run("Dilate");
	run("Invert LUT");
	saveAs("Tiff", TempFileDir  +  "__WATERSHED.tif");
	rename("WATERSHED_RESULT");
		
	updateProgressWindow(_ProgressWindowTitle,"ANALYZING SEGMENTED RESULT","");
				
	//Analyze particles
	run("Set Scale...", "distance=" + pixels_per_um + " known=1 unit=micron");	
	run("Set Measurements...", "area center feret's redirect=None decimal=4");
	run("Analyze Particles...", "size=" + Min_Fiber_Area_Pixels+ "-" + Max_Fiber_Area_Pixels + " pixel show=Overlay display exclude clear");
	run("Labels...", "color=white font=9");
	rename("SEGMENTATION_RESULT");
	run("Flatten");
	saveAs("Tiff", TempFileDir   +  "__SEGMENTATION_RESULT.tif");
	selectWindow("SEGMENTATION_RESULT");
	run("Labels...", "color=yellow font=9 show");
	run("Close");
	run("Distribution...", "parameter=MinFeret or=20 and=0-100");
	saveAs("Tiff", OutputDir +  "FIBER_DIAMETERS.tif");
	saveAs("Results", OutputDir  +  "MEASUREMENTS.xls");


//*** GENERATE COMPOSITE/OVERLAY IMAGE				
	updateProgressWindow(_ProgressWindowTitle,"GENERATING COMPOSITE IMAGES","");

	if (MaskImageFileName!=""){				
		//Reload mask Image 
		open(ImageDir + MaskImageFileName);
		run("8-bit");
		selectWindow(MaskImageFileName);
		rename("MASK_IMAGE");
		setThreshold(0, 131);
		run("Convert to Mask");
		//run("Make Binary");
		run("Invert");
		run("Invert LUT");
		//run("Morphological Filters", "operation=Erosion element=Disk radius="+Mask_ErosionRadius_Pixels);    //6/7/2020  -MS Eliminate mask erosion step
		//selectWindow("MASK_IMAGE");
		//run("Close");
		//selectWindow("MASK_IMAGE-Erosion");
		//rename("MASK_IMAGE");
	}	
		
	//Generate Composite Image
	open(TempFileDir  + "__ORIGINAL.tif");
	rename("ORIGINAL_IMAGE");
	run("8-bit");
	open(TempFileDir   +  "__WATERSHED.tif");
	rename("WATERSHED_RESULT");
	run("Multiply...", "value=.5");
	if (MaskImageFileName!=""){		
		imageCalculator("AND", "WATERSHED_RESULT","MASK_IMAGE");   //copy to WATERSHED_RESULT
	}
	run("Merge Channels...", "c4=ORIGINAL_IMAGE c6=WATERSHED_RESULT");
	//selectWindow("Composite");
	run("RGB Color");
	selectWindow("RGB"); //not working
	rename("SEGMENTED_IMAGE");
	//close("Composite");
	selectWindow("SEGMENTED_IMAGE");
	saveAs("Tiff", OutputDir  +  "SEGMENTED_IMAGE.tif");
	if (MaskImageFileName!=""){		
		close("MASK_IMAGE");
	}

// PROCESSING COMPLETED
	updateProgressWindow(_ProgressWindowTitle,"PROCESSING COMPLETE","");





//********************************************
// HELPER SUBROUTINES
//********************************************

function updateProgressWindow(progress_window_title,step_txt, sub_step_txt) {
		selectWindow(progress_window_title);
		progress_window_title_2="["+ progress_window_title + "]";
		print(progress_window_title_2, "** " + step_txt + " - " + sub_step_txt + "\n");
		wait(500);
        return;
}


function initProgressWindow(width) {
	progress_window_title = "Progress";
	closeAllWindowInstances(progress_window_title);   //close any exisiting progress windows
	run("Text Window...", "name="+ "[" + progress_window_title + "]" +" width=" + width + " height=2 monospaced");	
	return progress_window_title;
}

function closeAllWindowInstances(window_name){
     while (isOpen(window_name)) { 
         selectWindow(window_name); 
         run("Close"); 
    } 
    return;
}



function getTimeStampString() {
	//Addapted from: https://code.adonline.id.au/timestamp-generation-imagej-macros/
     getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
     TimeString ="";
     TimeString = ""+year+"-"+TimeString;
     if (month<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+month +"-";     
     if (dayOfMonth<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+dayOfMonth+" ";     
     if (hour<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+hour+":";
     if (minute<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+minute+":";
     if (second<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+second;
     return TimeString; // Prints the time stamp
}

	
function appendToList(arr, value) {
  	//From https://imagej.nih.gov/ij/macros/examples/ExpandableArrays.txt
    arr2 = newArray(arr.length+1);
    for (i=0; i<arr.length; i++)
    	arr2[i] = arr[i];
    arr2[arr.length] = value;
    return arr2;
 }

function squared(value) {    
    return value*value;
 }



